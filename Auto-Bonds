local PlaceId = 70876832253163
local ScVer = "v2"
if game.PlaceId ~= PlaceId then warn("Auto Bond " .. ScVer .." doesn't work in this place!") return end
if game.CoreGui:FindFirstChild("Skibidi9967") or game.Players.LocalPlayer.PlayerGui:FindFirstChild("Skibidi9967") then warn("Script is already running!") return end
game.StarterGui:SetCore("SendNotification", {
	Title = "Renzy Auto Bonds "..ScVer;
	Text = "Loading.. this takes a few seconds.";
	Duration = 5
})
wait(8)

local sg = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local Credit = Instance.new("TextLabel")
local Title = Instance.new("TextLabel")
local Button = Instance.new("TextButton")
local Toggle = Instance.new("TextLabel")
local Collected = Instance.new("TextLabel")
local Warn = Instance.new("TextLabel")
local Reset = Instance.new("TextButton")
local FrameConstraint = Instance.new("UIAspectRatioConstraint")
local UiGrad = Instance.new("UIGradient")

local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
if not hum or hum.Health <= 0 then return end

local Trains = {
	"armor",
	"cattle",
	"default",
	"golden",
}

sg.Name = "Skibidi9967"
local success = pcall(function()
	sg.Parent = game.CoreGui
end)
if not success then
	sg.Parent = plr.PlayerGui
end
sg.IgnoreGuiInset = true

local function CreateUIStroke(Parent,Color,Thickness,Mode)
	local uiStroke = Instance.new("UIStroke")
	uiStroke.Parent = Parent
	uiStroke.Color = Color
	uiStroke.Thickness = Thickness
	uiStroke.ApplyStrokeMode = Mode
	return uiStroke
end

Frame.Parent = sg
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame.Size = UDim2.new(0.310000002, 0, 0.321792275, 0)
Instance.new("UIDragDetector", Frame)
CreateUIStroke(Frame, Color3.fromRGB(20, 32, 50), 3, Enum.ApplyStrokeMode.Border)
Frame.Visible = false

UICorner.Parent = Frame
UICorner.CornerRadius = UDim.new(0.200000003, 0)

FrameConstraint.Parent = Frame
FrameConstraint.AspectRatio = 1.566

UiGrad.Parent = Frame
UiGrad.Rotation = 90
UiGrad.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(161, 255, 241)), ColorSequenceKeypoint.new(1, Color3.fromRGB(171, 172, 255))})

Credit.Name = "Credit"
Credit.Parent = Frame
Credit.BackgroundTransparency = 1
Credit.Position = UDim2.new(0.321680367, 0, 0.860759497, 0)
Credit.Size = UDim2.new(0.356306285, 0, 0.13837488, 0)
Credit.Font = Enum.Font.Highway
Credit.RichText = true
Credit.Text = "Made by Renzy <font color='rgb(255,0,0)'>(Jump if bond not collecting)</font>"
Credit.TextColor3 = Color3.new(0.984314, 1, 0)
Credit.TextScaled = true
Credit.TextSize = 14
CreateUIStroke(Credit, Color3.fromRGB(0, 0, 0), 2, Enum.ApplyStrokeMode.Contextual)

Title.Name = "Title"
Title.Parent = Frame
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0.321680367, 0, 0.0569620244, 0)
Title.Size = UDim2.new(0.356306285, 0, 0.13837488, 0)
Title.Font = Enum.Font.Highway
Title.Text = "Auto Bonds "..ScVer
Title.TextColor3 = Color3.fromRGB(85, 255, 0)
Title.TextScaled = true
Title.TextSize = 14
CreateUIStroke(Title, Color3.fromRGB(0, 0, 0), 2, Enum.ApplyStrokeMode.Contextual)

Button.Name = "Button"
Button.Parent = Frame
Button.AnchorPoint = Vector2.new(0, 0.5)
Button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Button.Position = UDim2.new(0.54400003, 0, 0.5, 0)
Button.Size = UDim2.new(0.375, 0, 0.316455692, 0)
Button.Font = Enum.Font.Highway
Button.Text = "Start"
Button.TextColor3 = Color3.fromRGB(255, 255, 255)
Button.TextScaled = true
Button.TextSize = 14
Button.TextStrokeTransparency = 0
CreateUIStroke(Button, Color3.fromRGB(0, 0, 0), 2, Enum.ApplyStrokeMode.Border)

Toggle.Name = "Toggle"
Toggle.Parent = Frame
Toggle.AnchorPoint = Vector2.new(0, 0.5)
Toggle.BackgroundTransparency = 1
Toggle.Position = UDim2.new(0.0309999995, 0, 0.5, 0)
Toggle.Size = UDim2.new(0.461144984, 0, 0.212025464, 0)
Toggle.Font = Enum.Font.Highway
Toggle.Text = "Toggle:"
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.TextScaled = true
Toggle.TextSize = 14
CreateUIStroke(Toggle, Color3.fromRGB(0, 0, 0), 2, Enum.ApplyStrokeMode.Contextual)

Collected.Name = "Collected"
Collected.Parent = sg
Collected.BackgroundTransparency = 1
Collected.Position = UDim2.new(0.00999999978, 0, 0.553971469, 0)
Collected.Size = UDim2.new(0.172499999, 0, 0.0794297382, 0)
Collected.FontFace.Family = "rbxassetid://12187372175"
Collected.Text = "Collected Bonds: 0"
Collected.TextColor3 = Color3.fromRGB(255, 170, 127)
Collected.TextScaled = true
Collected.TextSize = 14
Collected.TextStrokeTransparency = 0
Collected.TextXAlignment = Enum.TextXAlignment.Left

Warn.Name = "Warn"
Warn.Parent = sg
Warn.AnchorPoint = Vector2.new(0.5, 0)
Warn.BackgroundTransparency = 1
Warn.Position = UDim2.new(0.498, 0, 0.136, 0)
Warn.Size = UDim2.new(0.358749986, 0, 0.0916496962, 0)
Warn.Font = Enum.Font.Highway
Warn.RichText = true
Warn.Text = "Made by Renzy "..
	"<font color='rgb(255,0,0)'>(Jump if bond not collecting)</font>"
Warn.TextColor3 = Color3.fromRGB(0, 255, 0)
Warn.TextScaled = true
Warn.TextSize = 14
Warn.TextStrokeTransparency = 0

Reset.Name = "Reset"
Reset.Parent = sg
Reset.BackgroundColor3 = Color3.new(1, 0, 0)
Reset.Position = UDim2.new(0.00935485866, 0, 0.646832883, 0)
Reset.Size = UDim2.new(0.116250001, 0, 0.0570264757, 0)
Reset.Font = Enum.Font.Highway
Reset.Text = "Reset UI"
Reset.TextColor3 = Color3.fromRGB(255, 255, 255)
Reset.TextScaled = true
Reset.TextSize = 14
Reset.TextStrokeTransparency = 0
CreateUIStroke(Reset, Color3.fromRGB(0, 0, 0), 2, Enum.ApplyStrokeMode.Border)
Reset.Visible = false

local startFlag = false 
local CD = false

local root = hum.RootPart
local start = root.Position
local endpos = Vector3.new(-424.443603515625, 29.518972396850586, -49040.59375)
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TS = game:GetService("TweenService")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local RemotePromise = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Network"):WaitForChild("RemotePromise"):WaitForChild("Remotes")
local CollectBondNetwork = RemotePromise:WaitForChild("C_ActivateObject")

local collectedBond = 0

local antivoidLoop = nil
local collectedSet = {}
local hasChair = false
local returning = false
local firstRun = true

queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

local function toggleAntiVoid(enabled)
	if enabled then
		antivoidLoop = RunService.Stepped:Connect(function()
			if root and root.Position.Y <= workspace.FallenPartsDestroyHeight + 500 then
				root.Velocity = root.Velocity + Vector3.new(0, 250, 0)
			end
		end)
	else
		if antivoidLoop then
			antivoidLoop:Disconnect()
			antivoidLoop = nil
		end
	end
end

local train = nil
local trainSeat = nil

for _, v in pairs(Trains) do
	if workspace:FindFirstChild(v) then
		train = workspace:FindFirstChild(v)
		trainSeat = train.RequiredComponents.Controls.ConductorSeat:FindFirstChildWhichIsA("VehicleSeat")
	end
end

local function getNearestItem(itemName)
	local item, lastDist = nil, math.huge
	for _, v in pairs(workspace.RuntimeItems:GetChildren()) do
		if v.Name == itemName and v:IsA("Model") and v:FindFirstChildWhichIsA("BasePart") then
			local dist = (v.PrimaryPart.Position - root.Position).Magnitude
			if dist < lastDist then
				item = v
				lastDist = dist
			end
		end
	end
	return item
end

local function teleportToTrain()
	if trainSeat.Occupant == nil then
		trainSeat:Sit(hum)
		return true
	else
		return false
	end
end

local function ownChair(targetPos)
	local chair = getNearestItem("Chair")
	if not chair then return end

	local seat = chair:FindFirstChildWhichIsA("Seat")
	if not seat then return end

	local tik = 0
	local mult = CFrame.new(targetPos)
	
	for i = 1, 10 do -- 0.01s * 50 = 0.5s (same as tik < 5 with tik += 0.1)
		root.CFrame = mult
		if chair then
			seat:Sit(hum)
			hum:ChangeState(Enum.HumanoidStateType.Seated)
			hum:ChangeState(Enum.HumanoidStateType.Freefall)
		else
			break
		end
		task.wait(0.1)
	end

	if chair then
		local seat = chair:FindFirstChildWhichIsA("Seat")
		seat:Sit(hum)
		hum:ChangeState(Enum.HumanoidStateType.Seated)
		wait(.2)
		hum:ChangeState(Enum.HumanoidStateType.Jumping)
		wait(0.5)
		seat:Sit(hum)
		hum:ChangeState(Enum.HumanoidStateType.Seated)
		wait(.2)
	end
end

local function updateBonds()
	collectedBond += 1
	Collected.Text = "Collected Bonds: " .. collectedBond
end

local function collectBond(model)
	if not model or model.Parent == nil then return end
	if collectedSet[model] then return end -- already collected
	--print("collecting bond")

	local collected = false
	local conn

	conn = model.AncestryChanged:Connect(function(_, parent)
		if not parent and not collected and not collectedSet[model] then
			collected = true
			collectedSet[model] = true
			--print("bond collected")
			updateBonds()
			if conn then conn:Disconnect() conn = nil end
		end
	end)
	wait(.01)
	CollectBondNetwork:FireServer(model)
	--[[task.spawn(function()
		while not collected and conn do
			CollectBondNetwork:FireServer(model)
			--print("firing collect bond to server")
			task.wait(1)
		end
	end)]]

	task.delay(3, function()
		if conn then conn:Disconnect() conn = nil end
	end)
end

local function searchItem(itemname)
	local newpos = start
	local maxAttempts = 2
	local attempts = 0

	while not returning do
		local found = workspace.RuntimeItems:FindFirstChild(itemname)

		-- If we're looking for a chair, ensure it's unoccupied
		if itemname == "Chair" and found then
			local seat = found:FindFirstChildWhichIsA("Seat")
			if seat and seat.Occupant then
				found = nil -- mark as invalid and keep searching
			end
		end

		if found then break end -- Valid item found

		hum.JumpHeight = 0
		hum.JumpPower = 0

		local currentDistance = (newpos - start).Magnitude
		local totalDistance = (endpos - start).Magnitude

		if currentDistance >= totalDistance then
			attempts += 1
			newpos = start
		end

		if attempts >= maxAttempts then
			returning = true
			for i = 1, 3 do
				root.Velocity = Vector3.new(0,0,0)
				root.CFrame = CFrame.new(start) * CFrame.new(0,3,0)
				wait(1)
			end
			wait(1)
			hum.JumpHeight = 7.2
			hum.JumpPower = 50
			return error(itemname .. " not found after max attempts, teleporting back to start")
		end

		root.CFrame = CFrame.new(newpos, endpos) * CFrame.new(0, 0, -250)
		newpos = root.Position

		task.wait(0.01)
	end

	hum.JumpHeight = 7.2
	hum.JumpPower = 50
end

local function ensureSeated()
	local function trySit()
		local chair = getNearestItem("Chair")
		if chair then
			local seat = chair:FindFirstChildWhichIsA("Seat")
			if seat then
				seat:Sit(hum)
				hum:ChangeState(Enum.HumanoidStateType.Seated)
				return true
			end
		end
		return false
	end

	if not trySit() then
		searchItem("Chair")
		task.wait(0.2)
		trySit()
	end
end

--[[local function handleChair()
	searchItem("Chair")
	local chair = workspace.RuntimeItems:FindFirstChild("Chair")
	if not chair then return end

	if not chair.PrimaryPart then
		chair.PrimaryPart = chair:FindFirstChild("PrimaryPart") or chair:FindFirstChildWhichIsA("BasePart")
	end

	local seat = chair:FindFirstChildWhichIsA("Seat")
	local tik = 0
	root.CFrame = CFrame.new(chair.PrimaryPart.Position)
	hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
	root.CFrame = CFrame.new(chair.PrimaryPart.Position)
	hum:ChangeState(Enum.HumanoidStateType.Running)

	while not hum.Sit and tik < 5 do
		root.CFrame = CFrame.new(chair.PrimaryPart.Position)
		if seat then hum:ChangeState(Enum.HumanoidStateType.Seated) seat:Sit(hum) end
		tik += 0.01
		task.wait(0.01)
	end

	--[[if not char:FindFirstChild("Sack") and plr.Backpack:FindFirstChild("Sack") then
		hum:EquipTool(plr.Backpack.Sack)
	end

	Remotes:WaitForChild("StoreItem"):FireServer(chair)
	root.CFrame = CFrame.new(start)
	hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
end]]

local function autoBond()
	local success, msg = pcall(function()
		searchItem("Bond")
		local bond = getNearestItem("Bond")
		if bond then
			if not bond.PrimaryPart then
				bond.PrimaryPart = bond:FindFirstChildWhichIsA("BasePart")
			end

			local distance = (bond.PrimaryPart.Position - root.Position).Magnitude
			if distance > 8 then
				root.CFrame = CFrame.new(bond.PrimaryPart.Position + Vector3.new(0, 2, 0))
				if firstRun then
					firstRun = false
					ownChair(bond.PrimaryPart.Position)
				end

				-- Ensure seated before collecting
				local chair = getNearestItem("Chair")
				if chair and chair:FindFirstChildWhichIsA("Seat") then
					local seat = chair:FindFirstChildWhichIsA("Seat")
					seat:Sit(hum)
					hum:ChangeState(Enum.HumanoidStateType.Seated)
				else
					ensureSeated() -- get a chair
					ownChair(bond.PrimaryPart.Position)
				end
			end

			--RunService.Stepped:Wait() -- Let physics catch up
			collectBond(bond)
		end
	end)

	if success then
		autoBond()
	else
		warn("Error during autoBond:", msg)
	end
end

--[[hum.StateChanged:Connect(function(old, new)
	print("State Changed:", old, "to", new)
end)]]

hum.JumpHeight = 0
hum.JumpPower = 0
toggleAntiVoid(true)
ensureSeated()
autoBond()

local AutoDeath = _G.AutoDeath or true

if AutoDeath then
	hum:ChangeState(Enum.HumanoidStateType.Dead)
	hum.Sit = false
	wait(15)
	Remotes.EndDecision:FireServer(false)
	Remotes.EndGame:FireServer()
end

local function toggleStartbtn(bool)
	if bool then
		Button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
		Button.Text = "Stop"
		TS:Create(UiGrad, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Rotation = -90}):Play()
	else
		Button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		Button.Text = "Start"
		TS:Create(UiGrad, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Rotation = 90}):Play()
	end
end

local TeleportCheck = false
plr.OnTeleport:Connect(function(State)
	if (not TeleportCheck) and queueteleport then
		TeleportCheck = true
		queueteleport("_G.AutoDeath = "..tostring(AutoDeath).." loadstring(game:HttpGet('https://raw.githubusercontent.com/Renzy9967/WHOEVERMOVEFIRSTISGAY./refs/heads/main/Auto-Bonds'))()")
	else
		warn('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)
